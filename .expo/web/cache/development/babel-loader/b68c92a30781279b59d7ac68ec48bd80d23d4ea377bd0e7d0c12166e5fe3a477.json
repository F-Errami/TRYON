{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ReconstructionMorphologieScreen = function ReconstructionMorphologieScreen() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    modalVisible = _useState2[0],\n    setModalVisible = _useState2[1];\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: function onRequestClose() {\n        Alert.alert('Modal has been closed.');\n        setModalVisible(!modalVisible);\n        hideModal();\n      },\n      children: _jsx(View, {\n        style: styles.centeredView,\n        children: _jsxs(View, {\n          style: styles.modalView,\n          children: [_jsx(Text, {\n            style: styles.modalText,\n            children: \"Here are the instructions to add a new morphologie!\"\n          }), _jsx(Text, {\n            style: styles.modalText,\n            children: \"- Take a picture of your face\"\n          }), _jsx(Text, {\n            style: styles.modalText,\n            children: \"- Put your measures after\"\n          }), _jsx(Pressable, {\n            style: [styles.button, styles.buttonClose],\n            onPress: function onPress() {\n              return setModalVisible(!modalVisible);\n            },\n            children: _jsx(Text, {\n              style: styles.textStyle,\n              children: \"Hide Instructions\"\n            })\n          })]\n        })\n      })\n    }), _jsx(Pressable, {\n      style: [styles.button, styles.buttonOpen],\n      onPress: function onPress() {\n        return setModalVisible(true);\n      },\n      children: _jsx(Text, {\n        style: styles.textStyle,\n        children: \"Show Instructions\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 22\n  },\n  centeredView: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  modalView: {\n    margin: 20,\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: 35,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  },\n  button: {\n    borderRadius: 20,\n    padding: 10,\n    elevation: 2\n  },\n  buttonOpen: {\n    backgroundColor: '#F194FF'\n  },\n  buttonClose: {\n    backgroundColor: '#2196F3'\n  },\n  textStyle: {\n    color: 'white',\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  modalText: {\n    marginBottom: 15,\n    textAlign: 'center'\n  }\n});\nexport default ReconstructionMorphologieScreen;","map":{"version":3,"names":["React","useState","View","Text","StyleSheet","Modal","Alert","Pressable","jsx","_jsx","jsxs","_jsxs","ReconstructionMorphologieScreen","_useState","_useState2","_slicedToArray","modalVisible","setModalVisible","style","styles","container","children","animationType","transparent","visible","onRequestClose","alert","hideModal","centeredView","modalView","modalText","button","buttonClose","onPress","textStyle","buttonOpen","create","flex","justifyContent","alignItems","marginTop","margin","backgroundColor","borderRadius","padding","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","color","fontWeight","textAlign","marginBottom"],"sources":["C:/Users/jouai/Desktop/Telecom/S9/image/Projet vision/TRYON/screens/ReconstructionMorphologieScreen.js"],"sourcesContent":["import React , { useState } from 'react';\r\nimport { View, Text, StyleSheet, Modal,Alert,Pressable } from 'react-native';\r\n\r\nconst ReconstructionMorphologieScreen = () => {\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  return (\r\n    <View style={styles.container}>\r\n      <Modal\r\n        animationType=\"slide\"\r\n        transparent={true}\r\n        visible={modalVisible}\r\n        onRequestClose={() => {\r\n          Alert.alert('Modal has been closed.');\r\n          setModalVisible(!modalVisible);\r\n          hideModal();\r\n        }}\r\n      >\r\n        <View style={styles.centeredView}>\r\n          <View style={styles.modalView}>\r\n            <Text style={styles.modalText}>Here are the instructions to add a new morphologie!</Text>  \r\n            <Text style={styles.modalText}>- Take a picture of your face</Text>\r\n            <Text style={styles.modalText}>- Put your measures after</Text>\r\n            <Pressable\r\n              style={[styles.button, styles.buttonClose]}\r\n              onPress={() => setModalVisible(!modalVisible)}>\r\n              <Text style={styles.textStyle}>Hide Instructions</Text>\r\n            </Pressable>\r\n          </View>\r\n        </View>\r\n      </Modal>\r\n      <Pressable\r\n        style={[styles.button, styles.buttonOpen]}\r\n        onPress={() => setModalVisible(true)}>\r\n        <Text style={styles.textStyle}>Show Instructions</Text>\r\n      </Pressable>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginTop: 22,\r\n  },\r\n  centeredView: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  modalView: {\r\n    margin: 20,\r\n    backgroundColor: 'white',\r\n    borderRadius: 20,\r\n    padding: 35,\r\n    alignItems: 'center',\r\n    shadowColor: '#000',\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 4,\r\n    elevation: 5,\r\n  },\r\n  button: {\r\n    borderRadius: 20,\r\n    padding: 10,\r\n    elevation: 2,\r\n  },\r\n  buttonOpen: {\r\n    backgroundColor: '#F194FF',\r\n  },\r\n  buttonClose: {\r\n    backgroundColor: '#2196F3',\r\n  },\r\n  textStyle: {\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n    textAlign: 'center',\r\n  },\r\n  modalText: {\r\n    marginBottom: 15,\r\n    textAlign: 'center',\r\n  },\r\n});\r\n\r\nexport default ReconstructionMorphologieScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}